#include<iostream>
#include<vector>

using namespace std;

// Function to print the current state of the board
void printBoard(const vector<vector<int>>& board, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << board[i][j] << " ";
        }
        cout << "\n";
    }
    cout << "\n";
}

// Function to check if it's safe to place a queen at board[row][col]
bool isSafe(vector<vector<int>>& board, int row, int col, int n) {
    // Check the row on the left side
    for (int i = 0; i < col; i++) {
        if (board[row][i] == 1) {
            return false;
        }
    }

    // Check the upper diagonal on the left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check the lower diagonal on the left side
    for (int i = row, j = col; i < n && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true; // Safe to place a queen here
}

// Recursive function to solve the N-Queens problem
bool solveNQueens(vector<vector<int>>& board, int col, int n) {
    // Base case: If all queens are placed, print the solution
    if (col == n) {
        cout << "Final solution with all queens placed:\n";
        printBoard(board, n);
        return true;
    }

    // Try placing a queen in each row for the current column
    for (int i = 0; i < n; i++) {
        // Check if it's safe to place a queen at board[i][col]
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1; // Place the queen
            cout << "Placed queen at position (" << i + 1 << ", " << col + 1 << "):\n";
            printBoard(board, n);

            // Recur to place the next queen
            if (solveNQueens(board, col + 1, n)) {
                return true; // If successful, return true to stop further recursion
            }

            // Backtrack if placing queen in board[i][col] doesn't lead to a solution
            board[i][col] = 0; // Remove the queen
            cout << "Backtracking from position (" << i + 1 << ", " << col + 1 << "):\n";
            printBoard(board, n);
        }
    }

    return false; // No solution exists for this column
}

int main() {
    int n;
    cout << "Enter the N value: ";
    cin >> n;

    // Initialize the board with 0s (0 indicates no queen)
    vector<vector<int>> board(n, vector<int>(n, 0));

    // Start solving from the first column
    if (!solveNQueens(board, 0, n)) {
        cout << "Solution does not exist\n";
    }

    return 0;
}