#include<iostream>
#include<vector>

using namespace std;

// Function to check if placing a queen at (row, col) is safe
bool isSafe(vector<vector<int> >&board, int row, int col, int n) {
    // Check left side of the row for any queens
    for(int i = 0; i < col; i++) {
        if(board[row][i] == 1) {
            return false;
        }
    }
    
    // Check upper left diagonal
    for(int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if(board[i][j] == 1) {
            return false;
        }
    }
    
    // Check lower left diagonal
    for(int i = row, j = col; i < n && j >= 0; i++, j--) {
        if(board[i][j] == 1) {
            return false;
        }
    }
    
    return true;
}

// Function to solve the N-Queens problem and print all solutions
void solvedProblem(vector<vector<int> >&board, int col, int n) {
    // Base case: if all columns are filled, print the board configuration
    if(col == n) {
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                cout << board[i][j] << " ";
            }
            cout << "\n";
        }
        cout << "\n"; // Print a blank line between solutions
        return;
    }
    
    // Try placing a queen in each row of the current column
    for(int i = 0; i < n; i++) {
        if(isSafe(board, i, col, n)) {
            board[i][col] = 1; // Place queen
            
            // Recursive call to place queen in the next column
            solvedProblem(board, col + 1, n);
            
            // Backtrack and remove queen from current position
            board[i][col] = 0;
        }
    }
}

int main() {
    int n;
    cout << "Enter the value of N: ";
    cin >> n;
    
    // Initialize the board with all zeros
    vector<vector<int>> board(n, vector<int>(n, 0));
    
    // Solve the problem and print all solutions
    solvedProblem(board, 0, n);
    
    return 0;
}