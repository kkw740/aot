#include <iostream>
#include <climits>
using namespace std;

class algo 
{
public:
    float p[10], q[10], c[10][10];
    int n;

    void obst(float p[], float q[], int n);
    int find(float c[][10], int r[][10], int i, int j);
};

int algo::find(float c[][10], int r[][10], int i, int j) 
{ 
    int minCost = INT_MAX, minIndex = i;
    for (int m = r[i][j - 1]; m <= r[i + 1][j]; m++) 
    {
        if ((c[i][m - 1] + c[m][j]) < minCost) 
        {
            minCost = c[i][m - 1] + c[m][j];
            minIndex = m;
        }
    }
    return minIndex;
}

void algo::obst(float p[], float q[], int n) 
{
    float w[10][10] = {0};
    float c[10][10] = {0};
    int r[10][10] = {0};

    for (int i = 0; i <= n; i++) 
    {
        w[i][i] = q[i];
        r[i][i] = 0;
        c[i][i] = 0;
    }

    for (int i = 0; i < n; i++) 
    {
        w[i][i + 1] = q[i] + q[i + 1] + p[i + 1];
        r[i][i + 1] = i + 1;
        c[i][i + 1] = w[i][i + 1];
    }

    w[n][n] = q[n];
    r[n][n] = 0;
    c[n][n] = 0.0;

    for (int m = 2; m <= n; m++) 
    {
        for (int i = 0; i <= n - m; i++) 
        {
            int j = i + m;
            w[i][j] = w[i][j - 1] + p[j] + q[j];
            int k = find(c, r, i, j);
            c[i][j] = w[i][j] + c[i][k - 1] + c[k][j];
            r[i][j] = k;
        }
    }

    cout << "\nCost Matrix (c):" << endl;
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= n; j++) 
        {
            cout << c[i][j] << "\t";
        }
        cout << endl;
    }

    cout << "\nWeight Matrix (w):" << endl;
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= n; j++) 
        {
            cout << w[i][j] << "\t";
        }
        cout << endl;
    }

    cout << "\nRoot Matrix (r):" << endl;
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= n; j++) 
        {
            cout << r[i][j] << "\t";
        }
        cout << endl;
    }

    cout << "\nOptimal cost: " << c[0][n] << endl;
    cout << "Weight: " << w[0][n] << endl;
    cout << "Root value: " << r[0][n] << endl;
}

int main()
{
    algo a;
    int n;
    float p[10], q[10];

    cout << "Enter n: ";
    cin >> n;

    cout << "Enter probabilities of successful search:\n";
    for (int i = 1; i <= n; i++) {
        cout << "p[" << i << "] = ";
        cin >> p[i];
    }

    cout << "Enter probabilities of unsuccessful search:\n";
    for (int i = 0; i <= n; i++) {
        cout << "q[" << i << "] = ";
        cin >> q[i];
    }

    a.obst(p, q, n);

    return 0;
}
